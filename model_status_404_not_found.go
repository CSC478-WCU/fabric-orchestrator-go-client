/*
Fabric Orchestrator API

This is Fabric Orchestrator API

API version: 1.0.1
Contact: kthare10@unc.edu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Status404NotFound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Status404NotFound{}

// Status404NotFound struct for Status404NotFound
type Status404NotFound struct {
	Errors []Status404NotFoundErrors `json:"errors,omitempty"`
	Type *string `json:"type,omitempty"`
	Size *int32 `json:"size,omitempty"`
	Status *int32 `json:"status,omitempty"`
}

// NewStatus404NotFound instantiates a new Status404NotFound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatus404NotFound() *Status404NotFound {
	this := Status404NotFound{}
	var type_ string = "error"
	this.Type = &type_
	var size int32 = 1
	this.Size = &size
	var status int32 = 404
	this.Status = &status
	return &this
}

// NewStatus404NotFoundWithDefaults instantiates a new Status404NotFound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatus404NotFoundWithDefaults() *Status404NotFound {
	this := Status404NotFound{}
	var type_ string = "error"
	this.Type = &type_
	var size int32 = 1
	this.Size = &size
	var status int32 = 404
	this.Status = &status
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *Status404NotFound) GetErrors() []Status404NotFoundErrors {
	if o == nil || IsNil(o.Errors) {
		var ret []Status404NotFoundErrors
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status404NotFound) GetErrorsOk() ([]Status404NotFoundErrors, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *Status404NotFound) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Status404NotFoundErrors and assigns it to the Errors field.
func (o *Status404NotFound) SetErrors(v []Status404NotFoundErrors) {
	o.Errors = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Status404NotFound) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status404NotFound) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Status404NotFound) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Status404NotFound) SetType(v string) {
	o.Type = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Status404NotFound) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status404NotFound) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Status404NotFound) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *Status404NotFound) SetSize(v int32) {
	o.Size = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Status404NotFound) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status404NotFound) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Status404NotFound) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *Status404NotFound) SetStatus(v int32) {
	o.Status = &v
}

func (o Status404NotFound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Status404NotFound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableStatus404NotFound struct {
	value *Status404NotFound
	isSet bool
}

func (v NullableStatus404NotFound) Get() *Status404NotFound {
	return v.value
}

func (v *NullableStatus404NotFound) Set(val *Status404NotFound) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus404NotFound) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus404NotFound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus404NotFound(val *Status404NotFound) *NullableStatus404NotFound {
	return &NullableStatus404NotFound{value: val, isSet: true}
}

func (v NullableStatus404NotFound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus404NotFound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


