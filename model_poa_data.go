/*
Fabric Orchestrator API

This is Fabric Orchestrator API

API version: 1.0.1
Contact: kthare10@unc.edu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PoaData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoaData{}

// PoaData struct for PoaData
type PoaData struct {
	Operation *string `json:"operation,omitempty"`
	PoaId *string `json:"poa_id,omitempty"`
	State *string `json:"state,omitempty"`
	SliverId *string `json:"sliver_id,omitempty"`
	SliceId *string `json:"slice_id,omitempty"`
	Error *string `json:"error,omitempty"`
	Info map[string]interface{} `json:"info,omitempty"`
}

// NewPoaData instantiates a new PoaData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoaData() *PoaData {
	this := PoaData{}
	return &this
}

// NewPoaDataWithDefaults instantiates a new PoaData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoaDataWithDefaults() *PoaData {
	this := PoaData{}
	return &this
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *PoaData) GetOperation() string {
	if o == nil || IsNil(o.Operation) {
		var ret string
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoaData) GetOperationOk() (*string, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *PoaData) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given string and assigns it to the Operation field.
func (o *PoaData) SetOperation(v string) {
	o.Operation = &v
}

// GetPoaId returns the PoaId field value if set, zero value otherwise.
func (o *PoaData) GetPoaId() string {
	if o == nil || IsNil(o.PoaId) {
		var ret string
		return ret
	}
	return *o.PoaId
}

// GetPoaIdOk returns a tuple with the PoaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoaData) GetPoaIdOk() (*string, bool) {
	if o == nil || IsNil(o.PoaId) {
		return nil, false
	}
	return o.PoaId, true
}

// HasPoaId returns a boolean if a field has been set.
func (o *PoaData) HasPoaId() bool {
	if o != nil && !IsNil(o.PoaId) {
		return true
	}

	return false
}

// SetPoaId gets a reference to the given string and assigns it to the PoaId field.
func (o *PoaData) SetPoaId(v string) {
	o.PoaId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PoaData) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoaData) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PoaData) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *PoaData) SetState(v string) {
	o.State = &v
}

// GetSliverId returns the SliverId field value if set, zero value otherwise.
func (o *PoaData) GetSliverId() string {
	if o == nil || IsNil(o.SliverId) {
		var ret string
		return ret
	}
	return *o.SliverId
}

// GetSliverIdOk returns a tuple with the SliverId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoaData) GetSliverIdOk() (*string, bool) {
	if o == nil || IsNil(o.SliverId) {
		return nil, false
	}
	return o.SliverId, true
}

// HasSliverId returns a boolean if a field has been set.
func (o *PoaData) HasSliverId() bool {
	if o != nil && !IsNil(o.SliverId) {
		return true
	}

	return false
}

// SetSliverId gets a reference to the given string and assigns it to the SliverId field.
func (o *PoaData) SetSliverId(v string) {
	o.SliverId = &v
}

// GetSliceId returns the SliceId field value if set, zero value otherwise.
func (o *PoaData) GetSliceId() string {
	if o == nil || IsNil(o.SliceId) {
		var ret string
		return ret
	}
	return *o.SliceId
}

// GetSliceIdOk returns a tuple with the SliceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoaData) GetSliceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SliceId) {
		return nil, false
	}
	return o.SliceId, true
}

// HasSliceId returns a boolean if a field has been set.
func (o *PoaData) HasSliceId() bool {
	if o != nil && !IsNil(o.SliceId) {
		return true
	}

	return false
}

// SetSliceId gets a reference to the given string and assigns it to the SliceId field.
func (o *PoaData) SetSliceId(v string) {
	o.SliceId = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *PoaData) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoaData) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *PoaData) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *PoaData) SetError(v string) {
	o.Error = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *PoaData) GetInfo() map[string]interface{} {
	if o == nil || IsNil(o.Info) {
		var ret map[string]interface{}
		return ret
	}
	return o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoaData) GetInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Info) {
		return map[string]interface{}{}, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *PoaData) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]interface{} and assigns it to the Info field.
func (o *PoaData) SetInfo(v map[string]interface{}) {
	o.Info = v
}

func (o PoaData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoaData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !IsNil(o.PoaId) {
		toSerialize["poa_id"] = o.PoaId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.SliverId) {
		toSerialize["sliver_id"] = o.SliverId
	}
	if !IsNil(o.SliceId) {
		toSerialize["slice_id"] = o.SliceId
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	return toSerialize, nil
}

type NullablePoaData struct {
	value *PoaData
	isSet bool
}

func (v NullablePoaData) Get() *PoaData {
	return v.value
}

func (v *NullablePoaData) Set(val *PoaData) {
	v.value = val
	v.isSet = true
}

func (v NullablePoaData) IsSet() bool {
	return v.isSet
}

func (v *NullablePoaData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoaData(val *PoaData) *NullablePoaData {
	return &NullablePoaData{value: val, isSet: true}
}

func (v NullablePoaData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoaData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


