/*
Fabric Orchestrator API

This is Fabric Orchestrator API

API version: 1.0.1
Contact: kthare10@unc.edu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Slice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Slice{}

// Slice struct for Slice
type Slice struct {
	Model *string `json:"model,omitempty"`
	LeaseStartTime *string `json:"lease_start_time,omitempty"`
	LeaseEndTime *string `json:"lease_end_time,omitempty"`
	State *string `json:"state,omitempty"`
	ProjectId *string `json:"project_id,omitempty"`
	ProjectName *string `json:"project_name,omitempty"`
	GraphId string `json:"graph_id"`
	Name string `json:"name"`
	SliceId string `json:"slice_id"`
	OwnerUserId *string `json:"owner_user_id,omitempty"`
	OwnerEmail *string `json:"owner_email,omitempty"`
}

type _Slice Slice

// NewSlice instantiates a new Slice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlice(graphId string, name string, sliceId string) *Slice {
	this := Slice{}
	this.GraphId = graphId
	this.Name = name
	this.SliceId = sliceId
	return &this
}

// NewSliceWithDefaults instantiates a new Slice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSliceWithDefaults() *Slice {
	this := Slice{}
	return &this
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *Slice) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Slice) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *Slice) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *Slice) SetModel(v string) {
	o.Model = &v
}

// GetLeaseStartTime returns the LeaseStartTime field value if set, zero value otherwise.
func (o *Slice) GetLeaseStartTime() string {
	if o == nil || IsNil(o.LeaseStartTime) {
		var ret string
		return ret
	}
	return *o.LeaseStartTime
}

// GetLeaseStartTimeOk returns a tuple with the LeaseStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Slice) GetLeaseStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseStartTime) {
		return nil, false
	}
	return o.LeaseStartTime, true
}

// HasLeaseStartTime returns a boolean if a field has been set.
func (o *Slice) HasLeaseStartTime() bool {
	if o != nil && !IsNil(o.LeaseStartTime) {
		return true
	}

	return false
}

// SetLeaseStartTime gets a reference to the given string and assigns it to the LeaseStartTime field.
func (o *Slice) SetLeaseStartTime(v string) {
	o.LeaseStartTime = &v
}

// GetLeaseEndTime returns the LeaseEndTime field value if set, zero value otherwise.
func (o *Slice) GetLeaseEndTime() string {
	if o == nil || IsNil(o.LeaseEndTime) {
		var ret string
		return ret
	}
	return *o.LeaseEndTime
}

// GetLeaseEndTimeOk returns a tuple with the LeaseEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Slice) GetLeaseEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseEndTime) {
		return nil, false
	}
	return o.LeaseEndTime, true
}

// HasLeaseEndTime returns a boolean if a field has been set.
func (o *Slice) HasLeaseEndTime() bool {
	if o != nil && !IsNil(o.LeaseEndTime) {
		return true
	}

	return false
}

// SetLeaseEndTime gets a reference to the given string and assigns it to the LeaseEndTime field.
func (o *Slice) SetLeaseEndTime(v string) {
	o.LeaseEndTime = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Slice) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Slice) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Slice) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Slice) SetState(v string) {
	o.State = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *Slice) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Slice) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *Slice) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *Slice) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *Slice) GetProjectName() string {
	if o == nil || IsNil(o.ProjectName) {
		var ret string
		return ret
	}
	return *o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Slice) GetProjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectName) {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *Slice) HasProjectName() bool {
	if o != nil && !IsNil(o.ProjectName) {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given string and assigns it to the ProjectName field.
func (o *Slice) SetProjectName(v string) {
	o.ProjectName = &v
}

// GetGraphId returns the GraphId field value
func (o *Slice) GetGraphId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GraphId
}

// GetGraphIdOk returns a tuple with the GraphId field value
// and a boolean to check if the value has been set.
func (o *Slice) GetGraphIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GraphId, true
}

// SetGraphId sets field value
func (o *Slice) SetGraphId(v string) {
	o.GraphId = v
}

// GetName returns the Name field value
func (o *Slice) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Slice) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Slice) SetName(v string) {
	o.Name = v
}

// GetSliceId returns the SliceId field value
func (o *Slice) GetSliceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SliceId
}

// GetSliceIdOk returns a tuple with the SliceId field value
// and a boolean to check if the value has been set.
func (o *Slice) GetSliceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SliceId, true
}

// SetSliceId sets field value
func (o *Slice) SetSliceId(v string) {
	o.SliceId = v
}

// GetOwnerUserId returns the OwnerUserId field value if set, zero value otherwise.
func (o *Slice) GetOwnerUserId() string {
	if o == nil || IsNil(o.OwnerUserId) {
		var ret string
		return ret
	}
	return *o.OwnerUserId
}

// GetOwnerUserIdOk returns a tuple with the OwnerUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Slice) GetOwnerUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerUserId) {
		return nil, false
	}
	return o.OwnerUserId, true
}

// HasOwnerUserId returns a boolean if a field has been set.
func (o *Slice) HasOwnerUserId() bool {
	if o != nil && !IsNil(o.OwnerUserId) {
		return true
	}

	return false
}

// SetOwnerUserId gets a reference to the given string and assigns it to the OwnerUserId field.
func (o *Slice) SetOwnerUserId(v string) {
	o.OwnerUserId = &v
}

// GetOwnerEmail returns the OwnerEmail field value if set, zero value otherwise.
func (o *Slice) GetOwnerEmail() string {
	if o == nil || IsNil(o.OwnerEmail) {
		var ret string
		return ret
	}
	return *o.OwnerEmail
}

// GetOwnerEmailOk returns a tuple with the OwnerEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Slice) GetOwnerEmailOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerEmail) {
		return nil, false
	}
	return o.OwnerEmail, true
}

// HasOwnerEmail returns a boolean if a field has been set.
func (o *Slice) HasOwnerEmail() bool {
	if o != nil && !IsNil(o.OwnerEmail) {
		return true
	}

	return false
}

// SetOwnerEmail gets a reference to the given string and assigns it to the OwnerEmail field.
func (o *Slice) SetOwnerEmail(v string) {
	o.OwnerEmail = &v
}

func (o Slice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Slice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.LeaseStartTime) {
		toSerialize["lease_start_time"] = o.LeaseStartTime
	}
	if !IsNil(o.LeaseEndTime) {
		toSerialize["lease_end_time"] = o.LeaseEndTime
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.ProjectName) {
		toSerialize["project_name"] = o.ProjectName
	}
	toSerialize["graph_id"] = o.GraphId
	toSerialize["name"] = o.Name
	toSerialize["slice_id"] = o.SliceId
	if !IsNil(o.OwnerUserId) {
		toSerialize["owner_user_id"] = o.OwnerUserId
	}
	if !IsNil(o.OwnerEmail) {
		toSerialize["owner_email"] = o.OwnerEmail
	}
	return toSerialize, nil
}

func (o *Slice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"graph_id",
		"name",
		"slice_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSlice := _Slice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSlice)

	if err != nil {
		return err
	}

	*o = Slice(varSlice)

	return err
}

type NullableSlice struct {
	value *Slice
	isSet bool
}

func (v NullableSlice) Get() *Slice {
	return v.value
}

func (v *NullableSlice) Set(val *Slice) {
	v.value = val
	v.isSet = true
}

func (v NullableSlice) IsSet() bool {
	return v.isSet
}

func (v *NullableSlice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlice(val *Slice) *NullableSlice {
	return &NullableSlice{value: val, isSet: true}
}

func (v NullableSlice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


