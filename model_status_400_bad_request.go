/*
Fabric Orchestrator API

This is Fabric Orchestrator API

API version: 1.0.1
Contact: kthare10@unc.edu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Status400BadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Status400BadRequest{}

// Status400BadRequest struct for Status400BadRequest
type Status400BadRequest struct {
	Errors []Status400BadRequestErrors `json:"errors,omitempty"`
}

// NewStatus400BadRequest instantiates a new Status400BadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatus400BadRequest() *Status400BadRequest {
	this := Status400BadRequest{}
	return &this
}

// NewStatus400BadRequestWithDefaults instantiates a new Status400BadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatus400BadRequestWithDefaults() *Status400BadRequest {
	this := Status400BadRequest{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *Status400BadRequest) GetErrors() []Status400BadRequestErrors {
	if o == nil || IsNil(o.Errors) {
		var ret []Status400BadRequestErrors
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status400BadRequest) GetErrorsOk() ([]Status400BadRequestErrors, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *Status400BadRequest) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Status400BadRequestErrors and assigns it to the Errors field.
func (o *Status400BadRequest) SetErrors(v []Status400BadRequestErrors) {
	o.Errors = v
}

func (o Status400BadRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Status400BadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableStatus400BadRequest struct {
	value *Status400BadRequest
	isSet bool
}

func (v NullableStatus400BadRequest) Get() *Status400BadRequest {
	return v.value
}

func (v *NullableStatus400BadRequest) Set(val *Status400BadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus400BadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus400BadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus400BadRequest(val *Status400BadRequest) *NullableStatus400BadRequest {
	return &NullableStatus400BadRequest{value: val, isSet: true}
}

func (v NullableStatus400BadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus400BadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


