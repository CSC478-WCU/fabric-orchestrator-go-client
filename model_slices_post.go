/*
Fabric Orchestrator API

This is Fabric Orchestrator API

API version: 1.0.1
Contact: kthare10@unc.edu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SlicesPost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SlicesPost{}

// SlicesPost struct for SlicesPost
type SlicesPost struct {
	GraphModel string `json:"graph_model"`
	SshKeys []string `json:"ssh_keys"`
}

type _SlicesPost SlicesPost

// NewSlicesPost instantiates a new SlicesPost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlicesPost(graphModel string, sshKeys []string) *SlicesPost {
	this := SlicesPost{}
	this.GraphModel = graphModel
	this.SshKeys = sshKeys
	return &this
}

// NewSlicesPostWithDefaults instantiates a new SlicesPost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlicesPostWithDefaults() *SlicesPost {
	this := SlicesPost{}
	return &this
}

// GetGraphModel returns the GraphModel field value
func (o *SlicesPost) GetGraphModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GraphModel
}

// GetGraphModelOk returns a tuple with the GraphModel field value
// and a boolean to check if the value has been set.
func (o *SlicesPost) GetGraphModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GraphModel, true
}

// SetGraphModel sets field value
func (o *SlicesPost) SetGraphModel(v string) {
	o.GraphModel = v
}

// GetSshKeys returns the SshKeys field value
func (o *SlicesPost) GetSshKeys() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SshKeys
}

// GetSshKeysOk returns a tuple with the SshKeys field value
// and a boolean to check if the value has been set.
func (o *SlicesPost) GetSshKeysOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SshKeys, true
}

// SetSshKeys sets field value
func (o *SlicesPost) SetSshKeys(v []string) {
	o.SshKeys = v
}

func (o SlicesPost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SlicesPost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["graph_model"] = o.GraphModel
	toSerialize["ssh_keys"] = o.SshKeys
	return toSerialize, nil
}

func (o *SlicesPost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"graph_model",
		"ssh_keys",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSlicesPost := _SlicesPost{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSlicesPost)

	if err != nil {
		return err
	}

	*o = SlicesPost(varSlicesPost)

	return err
}

type NullableSlicesPost struct {
	value *SlicesPost
	isSet bool
}

func (v NullableSlicesPost) Get() *SlicesPost {
	return v.value
}

func (v *NullableSlicesPost) Set(val *SlicesPost) {
	v.value = val
	v.isSet = true
}

func (v NullableSlicesPost) IsSet() bool {
	return v.isSet
}

func (v *NullableSlicesPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlicesPost(val *SlicesPost) *NullableSlicesPost {
	return &NullableSlicesPost{value: val, isSet: true}
}

func (v NullableSlicesPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlicesPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


