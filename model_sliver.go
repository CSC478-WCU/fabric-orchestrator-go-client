/*
Fabric Orchestrator API

This is Fabric Orchestrator API

API version: 1.0.1
Contact: kthare10@unc.edu
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Sliver type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sliver{}

// Sliver struct for Sliver
type Sliver struct {
	Notice *string `json:"notice,omitempty"`
	SliverType *string `json:"sliver_type,omitempty"`
	Sliver map[string]interface{} `json:"sliver,omitempty"`
	LeaseStartTime *string `json:"lease_start_time,omitempty"`
	LeaseEndTime *string `json:"lease_end_time,omitempty"`
	State *string `json:"state,omitempty"`
	PendingState *string `json:"pending_state,omitempty"`
	JoinState *string `json:"join_state,omitempty"`
	GraphNodeId string `json:"graph_node_id"`
	SliceId string `json:"slice_id"`
	SliverId string `json:"sliver_id"`
	OwnerUserId *string `json:"owner_user_id,omitempty"`
	OwnerEmail *string `json:"owner_email,omitempty"`
}

type _Sliver Sliver

// NewSliver instantiates a new Sliver object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSliver(graphNodeId string, sliceId string, sliverId string) *Sliver {
	this := Sliver{}
	this.GraphNodeId = graphNodeId
	this.SliceId = sliceId
	this.SliverId = sliverId
	return &this
}

// NewSliverWithDefaults instantiates a new Sliver object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSliverWithDefaults() *Sliver {
	this := Sliver{}
	return &this
}

// GetNotice returns the Notice field value if set, zero value otherwise.
func (o *Sliver) GetNotice() string {
	if o == nil || IsNil(o.Notice) {
		var ret string
		return ret
	}
	return *o.Notice
}

// GetNoticeOk returns a tuple with the Notice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sliver) GetNoticeOk() (*string, bool) {
	if o == nil || IsNil(o.Notice) {
		return nil, false
	}
	return o.Notice, true
}

// HasNotice returns a boolean if a field has been set.
func (o *Sliver) HasNotice() bool {
	if o != nil && !IsNil(o.Notice) {
		return true
	}

	return false
}

// SetNotice gets a reference to the given string and assigns it to the Notice field.
func (o *Sliver) SetNotice(v string) {
	o.Notice = &v
}

// GetSliverType returns the SliverType field value if set, zero value otherwise.
func (o *Sliver) GetSliverType() string {
	if o == nil || IsNil(o.SliverType) {
		var ret string
		return ret
	}
	return *o.SliverType
}

// GetSliverTypeOk returns a tuple with the SliverType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sliver) GetSliverTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SliverType) {
		return nil, false
	}
	return o.SliverType, true
}

// HasSliverType returns a boolean if a field has been set.
func (o *Sliver) HasSliverType() bool {
	if o != nil && !IsNil(o.SliverType) {
		return true
	}

	return false
}

// SetSliverType gets a reference to the given string and assigns it to the SliverType field.
func (o *Sliver) SetSliverType(v string) {
	o.SliverType = &v
}

// GetSliver returns the Sliver field value if set, zero value otherwise.
func (o *Sliver) GetSliver() map[string]interface{} {
	if o == nil || IsNil(o.Sliver) {
		var ret map[string]interface{}
		return ret
	}
	return o.Sliver
}

// GetSliverOk returns a tuple with the Sliver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sliver) GetSliverOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Sliver) {
		return map[string]interface{}{}, false
	}
	return o.Sliver, true
}

// HasSliver returns a boolean if a field has been set.
func (o *Sliver) HasSliver() bool {
	if o != nil && !IsNil(o.Sliver) {
		return true
	}

	return false
}

// SetSliver gets a reference to the given map[string]interface{} and assigns it to the Sliver field.
func (o *Sliver) SetSliver(v map[string]interface{}) {
	o.Sliver = v
}

// GetLeaseStartTime returns the LeaseStartTime field value if set, zero value otherwise.
func (o *Sliver) GetLeaseStartTime() string {
	if o == nil || IsNil(o.LeaseStartTime) {
		var ret string
		return ret
	}
	return *o.LeaseStartTime
}

// GetLeaseStartTimeOk returns a tuple with the LeaseStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sliver) GetLeaseStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseStartTime) {
		return nil, false
	}
	return o.LeaseStartTime, true
}

// HasLeaseStartTime returns a boolean if a field has been set.
func (o *Sliver) HasLeaseStartTime() bool {
	if o != nil && !IsNil(o.LeaseStartTime) {
		return true
	}

	return false
}

// SetLeaseStartTime gets a reference to the given string and assigns it to the LeaseStartTime field.
func (o *Sliver) SetLeaseStartTime(v string) {
	o.LeaseStartTime = &v
}

// GetLeaseEndTime returns the LeaseEndTime field value if set, zero value otherwise.
func (o *Sliver) GetLeaseEndTime() string {
	if o == nil || IsNil(o.LeaseEndTime) {
		var ret string
		return ret
	}
	return *o.LeaseEndTime
}

// GetLeaseEndTimeOk returns a tuple with the LeaseEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sliver) GetLeaseEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseEndTime) {
		return nil, false
	}
	return o.LeaseEndTime, true
}

// HasLeaseEndTime returns a boolean if a field has been set.
func (o *Sliver) HasLeaseEndTime() bool {
	if o != nil && !IsNil(o.LeaseEndTime) {
		return true
	}

	return false
}

// SetLeaseEndTime gets a reference to the given string and assigns it to the LeaseEndTime field.
func (o *Sliver) SetLeaseEndTime(v string) {
	o.LeaseEndTime = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Sliver) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sliver) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Sliver) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Sliver) SetState(v string) {
	o.State = &v
}

// GetPendingState returns the PendingState field value if set, zero value otherwise.
func (o *Sliver) GetPendingState() string {
	if o == nil || IsNil(o.PendingState) {
		var ret string
		return ret
	}
	return *o.PendingState
}

// GetPendingStateOk returns a tuple with the PendingState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sliver) GetPendingStateOk() (*string, bool) {
	if o == nil || IsNil(o.PendingState) {
		return nil, false
	}
	return o.PendingState, true
}

// HasPendingState returns a boolean if a field has been set.
func (o *Sliver) HasPendingState() bool {
	if o != nil && !IsNil(o.PendingState) {
		return true
	}

	return false
}

// SetPendingState gets a reference to the given string and assigns it to the PendingState field.
func (o *Sliver) SetPendingState(v string) {
	o.PendingState = &v
}

// GetJoinState returns the JoinState field value if set, zero value otherwise.
func (o *Sliver) GetJoinState() string {
	if o == nil || IsNil(o.JoinState) {
		var ret string
		return ret
	}
	return *o.JoinState
}

// GetJoinStateOk returns a tuple with the JoinState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sliver) GetJoinStateOk() (*string, bool) {
	if o == nil || IsNil(o.JoinState) {
		return nil, false
	}
	return o.JoinState, true
}

// HasJoinState returns a boolean if a field has been set.
func (o *Sliver) HasJoinState() bool {
	if o != nil && !IsNil(o.JoinState) {
		return true
	}

	return false
}

// SetJoinState gets a reference to the given string and assigns it to the JoinState field.
func (o *Sliver) SetJoinState(v string) {
	o.JoinState = &v
}

// GetGraphNodeId returns the GraphNodeId field value
func (o *Sliver) GetGraphNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GraphNodeId
}

// GetGraphNodeIdOk returns a tuple with the GraphNodeId field value
// and a boolean to check if the value has been set.
func (o *Sliver) GetGraphNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GraphNodeId, true
}

// SetGraphNodeId sets field value
func (o *Sliver) SetGraphNodeId(v string) {
	o.GraphNodeId = v
}

// GetSliceId returns the SliceId field value
func (o *Sliver) GetSliceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SliceId
}

// GetSliceIdOk returns a tuple with the SliceId field value
// and a boolean to check if the value has been set.
func (o *Sliver) GetSliceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SliceId, true
}

// SetSliceId sets field value
func (o *Sliver) SetSliceId(v string) {
	o.SliceId = v
}

// GetSliverId returns the SliverId field value
func (o *Sliver) GetSliverId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SliverId
}

// GetSliverIdOk returns a tuple with the SliverId field value
// and a boolean to check if the value has been set.
func (o *Sliver) GetSliverIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SliverId, true
}

// SetSliverId sets field value
func (o *Sliver) SetSliverId(v string) {
	o.SliverId = v
}

// GetOwnerUserId returns the OwnerUserId field value if set, zero value otherwise.
func (o *Sliver) GetOwnerUserId() string {
	if o == nil || IsNil(o.OwnerUserId) {
		var ret string
		return ret
	}
	return *o.OwnerUserId
}

// GetOwnerUserIdOk returns a tuple with the OwnerUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sliver) GetOwnerUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerUserId) {
		return nil, false
	}
	return o.OwnerUserId, true
}

// HasOwnerUserId returns a boolean if a field has been set.
func (o *Sliver) HasOwnerUserId() bool {
	if o != nil && !IsNil(o.OwnerUserId) {
		return true
	}

	return false
}

// SetOwnerUserId gets a reference to the given string and assigns it to the OwnerUserId field.
func (o *Sliver) SetOwnerUserId(v string) {
	o.OwnerUserId = &v
}

// GetOwnerEmail returns the OwnerEmail field value if set, zero value otherwise.
func (o *Sliver) GetOwnerEmail() string {
	if o == nil || IsNil(o.OwnerEmail) {
		var ret string
		return ret
	}
	return *o.OwnerEmail
}

// GetOwnerEmailOk returns a tuple with the OwnerEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sliver) GetOwnerEmailOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerEmail) {
		return nil, false
	}
	return o.OwnerEmail, true
}

// HasOwnerEmail returns a boolean if a field has been set.
func (o *Sliver) HasOwnerEmail() bool {
	if o != nil && !IsNil(o.OwnerEmail) {
		return true
	}

	return false
}

// SetOwnerEmail gets a reference to the given string and assigns it to the OwnerEmail field.
func (o *Sliver) SetOwnerEmail(v string) {
	o.OwnerEmail = &v
}

func (o Sliver) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sliver) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Notice) {
		toSerialize["notice"] = o.Notice
	}
	if !IsNil(o.SliverType) {
		toSerialize["sliver_type"] = o.SliverType
	}
	if !IsNil(o.Sliver) {
		toSerialize["sliver"] = o.Sliver
	}
	if !IsNil(o.LeaseStartTime) {
		toSerialize["lease_start_time"] = o.LeaseStartTime
	}
	if !IsNil(o.LeaseEndTime) {
		toSerialize["lease_end_time"] = o.LeaseEndTime
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.PendingState) {
		toSerialize["pending_state"] = o.PendingState
	}
	if !IsNil(o.JoinState) {
		toSerialize["join_state"] = o.JoinState
	}
	toSerialize["graph_node_id"] = o.GraphNodeId
	toSerialize["slice_id"] = o.SliceId
	toSerialize["sliver_id"] = o.SliverId
	if !IsNil(o.OwnerUserId) {
		toSerialize["owner_user_id"] = o.OwnerUserId
	}
	if !IsNil(o.OwnerEmail) {
		toSerialize["owner_email"] = o.OwnerEmail
	}
	return toSerialize, nil
}

func (o *Sliver) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"graph_node_id",
		"slice_id",
		"sliver_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSliver := _Sliver{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSliver)

	if err != nil {
		return err
	}

	*o = Sliver(varSliver)

	return err
}

type NullableSliver struct {
	value *Sliver
	isSet bool
}

func (v NullableSliver) Get() *Sliver {
	return v.value
}

func (v *NullableSliver) Set(val *Sliver) {
	v.value = val
	v.isSet = true
}

func (v NullableSliver) IsSet() bool {
	return v.isSet
}

func (v *NullableSliver) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSliver(val *Sliver) *NullableSliver {
	return &NullableSliver{value: val, isSet: true}
}

func (v NullableSliver) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSliver) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


